const passport = require('passport');
const mongoose = require('mongoose');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');

const User = mongoose.model('users'); // Links us to the collection

passport.serializeUser((user, done) => {
  // id is not the profile id.
  // This id is the identifier generated by mongo and assigned to the record.
  // We dont use google id, because we could make use of multiple providers (Facebook, twitter etc).
  done(null, user.id); 
})

// Turns id into Mongoose model instance.
passport.deserializeUser((id, done) => {
  User.findById(id)
    .then((user) => {
      done(null, user.id); 
    })
  
})

passport.use(
    new GoogleStrategy(
      {
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback',
        proxy: true
      },
      (accessToken, refreshToken, profile, done) => {
        // Check to see if the user exists in the collection
        User.findOne({googleId: profile.id})
          .then((existingUser) => {
            if(existingUser) {
              console.info(`User found: ${existingUser}`);
              done(null, existingUser);
            } else {
              // Model Instance (Record inside collection)
              new User({
                googleId: profile.id 
              }).save()
                .then(user => {
                  done(null, user);
                })
            }
          })

        
      }
    )
  );

  